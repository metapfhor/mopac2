      SUBROUTINE WRTKEY(KEYWRD)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'SIZES'
      CHARACTER*241 KEYWRD, ALLKEY
***********************************************************************
*
*  WRTKEY CHECKS ALL KEY-WORDS AND PRINTS THOSE IT RECOGNIZES.  IF IT
*  FINDS A WORD IT DOES NOT RECOGNIZE THE PROGRAM WILL BE STOPPED.
*
***********************************************************************
      COMMON /NUMCAL/ NUMCAL
      COMMON /TIMDMP/ TLEFT, TDUMP
      LOGICAL UHF, TRIP, BIRAD, EXCI, CI, MYWORD
      LOGICAL AM1, MNDO, MINDO3, PM3
C**********************************************************************
C* SHIHAO'S MODIFICATION START
C* Added:
      LOGICAL PDG,MDG
C* SHIHAO'S MODIFICATION END
C**********************************************************************
      CHARACTER CH*1, CHRONO*7
      SAVE AM1, MNDO, MINDO3
      DATA AM1, MNDO, MINDO3, PM3 /4*.FALSE./
      ALLKEY=KEYWRD
C    DUMMY IF STATEMENT TO REMOVE AMPERSAND AND PLUS SIGNS, IF PRESENT
      IF(MYWORD(ALLKEY(160:),' SETUP'))I=1
      IF(MYWORD(ALLKEY,'&'))I=2
      IF(MYWORD(ALLKEY,' +'))I=3
      IF(MYWORD(ALLKEY,'AUTHOR')) THEN
         WRITE(6,'(10X,'' MOPAC - A GENERAL MOLECULAR ORBITAL PACKAGE'',
     1/         ,10X,''   ORIGINAL VERSION WRITTEN IN 1983'')')
         WRITE(6,'(10X,''     BY JAMES J. P. STEWART AT THE'',/
     1         ,10X,''     UNIVERSITY OF TEXAS AT AUSTIN'',/
     2         ,10X,''          AUSTIN, TEXAS, 78712'')')
      ENDIF
      IF (MYWORD(ALLKEY,'VECT') ) WRITE(6,220)
      IF (MYWORD(ALLKEY,' EXTE') ) THEN
         I=INDEX(KEYWRD,' EXTE')
         J=INDEX(KEYWRD(I:),'=')+I
         I=INDEX(KEYWRD(J:),' ')+J-1
         WRITE(6,230)KEYWRD(J:I)
      ENDIF
      MAXGEO=0
      IF (MYWORD(ALLKEY,' DENS') ) WRITE(6,240)
      IF (MYWORD(ALLKEY,'SPIN') ) WRITE(6,250)
      IF (MYWORD(ALLKEY,' DEPVAR') )
     1WRITE(6,260)READA(KEYWRD,INDEX(KEYWRD,'DEPVAR'))
      IF (MYWORD(ALLKEY,' DEP ') )WRITE(6,270)
      IF (MYWORD(ALLKEY,'VELO') )WRITE(6,280)
      IF (MYWORD(ALLKEY,' GREENF') ) WRITE(6,10)
   10 FORMAT(' *  GREEN    - RUN DANOVICH''S GREEN''S FUNCTION CALCN.')
      IF (MYWORD(ALLKEY,'TIMES') )WRITE(6,290)
      IF (MYWORD(ALLKEY,'PARASOK') ) WRITE(6,300)
      IF (MYWORD(ALLKEY,'NODIIS') ) WRITE(6,310)
      IF (MYWORD(ALLKEY,'BONDS') ) WRITE(6,320)
      IF (MYWORD(ALLKEY,'GEO-OK') ) WRITE(6,330)
      IF (MYWORD(ALLKEY,'FOCK') ) WRITE(6,340)
      IF (MYWORD(ALLKEY,'LARGE') ) WRITE(6,350)
      IF (MYWORD(ALLKEY,' K=') ) WRITE(6,360)
      IF (MYWORD(ALLKEY,'NOLOG') ) WRITE(6,370)
      IF (MYWORD(ALLKEY,'AIGIN') ) WRITE(6,380)
      IF (MYWORD(ALLKEY,'AIGOUT') ) WRITE(6,390)
      IF (MYWORD(ALLKEY,'AIDER') ) WRITE(6,400)
      IF (MYWORD(ALLKEY,' S1978') ) WRITE(6,410)
      IF (MYWORD(ALLKEY,' SI1978') ) WRITE(6,420)
      IF (MYWORD(ALLKEY,' P1994') ) WRITE(6,430)
      IF (MYWORD(ALLKEY,' GRAP') ) WRITE(6,440)
      IF (MYWORD(ALLKEY,'NOANCI') ) WRITE(6,460)
      IF (MYWORD(ALLKEY,'1ELEC') ) WRITE(6,450)
      IF (MYWORD(ALLKEY(:162),' SETUP') ) WRITE(6,490)
      IF (MYWORD(ALLKEY,' NOMM') ) WRITE(6,480)
      IF (MYWORD(ALLKEY,' MMOK') ) WRITE(6,500)
      IF (MYWORD(ALLKEY,'INTERP') ) WRITE(6,510)
      IF (MYWORD(ALLKEY,' ESR') ) WRITE(6,470)
      IF (MYWORD(ALLKEY,'DFP') ) WRITE(6,520)
      IF (MYWORD(ALLKEY,'ANALYT') ) WRITE(6,530)
      IF (MYWORD(ALLKEY,' MECI') ) WRITE(6,540)
      IF (MYWORD(ALLKEY,'LOCAL') ) WRITE(6,580)
      IF (MYWORD(ALLKEY,'MULLIK') ) WRITE(6,590)
      IF (MYWORD(ALLKEY,' XYZ') ) WRITE(6,600)
      IF (MYWORD(ALLKEY,' PI') ) WRITE(6,610)
      IF (MYWORD(ALLKEY,'ECHO') ) WRITE(6,620)
      IF (MYWORD(ALLKEY, 'SING') ) WRITE(6,930)
      IF (MYWORD(ALLKEY, 'DOUB') ) WRITE(6,940)
      IF (MYWORD(ALLKEY, 'QUAR') ) WRITE(6,960)
      IF (MYWORD(ALLKEY, 'QUIN') ) WRITE(6,970)
      IF (MYWORD(ALLKEY, 'SEXT') ) WRITE(6,980)
      IF (MYWORD(ALLKEY,'H-PRIO') ) WRITE(6,630)
      IF (MYWORD(ALLKEY,'X-PRIO') ) WRITE(6,640)
      IF (MYWORD(ALLKEY,'T-PRIO') ) WRITE(6,650)
      IF (MYWORD(ALLKEY,'COMPFG') ) WRITE(6,670)
      IF (MYWORD(ALLKEY,'POLAR') ) WRITE(6,660)
      IF (MYWORD(ALLKEY,'DEBUG ') ) WRITE(6,680)
      IF (MYWORD(ALLKEY,'RESTART') ) WRITE(6,690)
C
C     KEYWORDS ADDED FOR ESP MOPAC
C
      IF (MYWORD(ALLKEY,'ESP ') ) WRITE(6,700)
      IF (MYWORD(ALLKEY,'NSURF') ) WRITE(6,710)
      IF (MYWORD(ALLKEY,'SCALE') ) WRITE(6,720)
      IF (MYWORD(ALLKEY,'SCINCR') ) WRITE(6,730)
      IF (MYWORD(ALLKEY,'SLOPE') ) WRITE(6,740)
      IF (MYWORD(ALLKEY,'DIPOLE') ) WRITE(6,750)
      IF (MYWORD(ALLKEY,'DIPX') ) WRITE(6,760)
      IF (MYWORD(ALLKEY,'DIPY') ) WRITE(6,770)
      IF (MYWORD(ALLKEY,'DIPZ') ) WRITE(6,780)
      IF (MYWORD(ALLKEY,'CONNOLLY') ) WRITE(6,790)
      IF (MYWORD(ALLKEY,'ESPRST') ) WRITE(6,800)
      IF (MYWORD(ALLKEY,' POTWRT') ) WRITE(6,810)
C
C     KEYWORDS ADDED FOR COSMO MOPAC
C
      IF (MYWORD(ALLKEY,'RSOLV') ) WRITE(6,1640)
      IF (MYWORD(ALLKEY,'EPS') ) WRITE(6,1650)
      IF (MYWORD(ALLKEY,'DELSC') ) WRITE(6,1660)
      IF (MYWORD(ALLKEY,'DISEX') ) WRITE(6,1670)
      IF (MYWORD(ALLKEY,'NSPA') ) WRITE(6,1680)

C**********************************************************************
C* SHIHAO'S MODIFICATION START
C* Added:
C     KEYWORDS ADDED FOR CONSTRAINT
      IF (MYWORD(ALLKEY,'CONST') ) WRITE(6,1690)
C* SHIHAO'S MODIFICATION END
C**********************************************************************

C       Laurent Modification
      IF (MYWORD(ALLKEY,'ALTCON') ) WRITE(6,1700)
C       End Laurent


C
C                       KEYWORDS ADDED FOR PMEP BY BINGZE WANG AUG 1993
C
      IF (MYWORD(ALLKEY,' PMEP ') ) WRITE(IW,881)
      IF (MYWORD(ALLKEY,' PMEPR ') ) WRITE(IW,891)
      IF (MYWORD(ALLKEY,' PRTMEP') ) WRITE(IW,911)
      IF (MYWORD(ALLKEY,' MINMEP') ) WRITE(IW,921)
      IF (MYWORD(ALLKEY,' QPMEP ') ) THEN
         WRITE(IW,901)
         IF (MYWORD(ALLKEY,' WILLIAMS') ) WRITE(IW,931)
      ENDIF
C                                       END OF PMEP ADDITION BY B WANG
      IF (MYWORD(ALLKEY,'WILLIAMS') ) WRITE(6,820)
      IF (MYWORD(ALLKEY,'SYMAVG') ) WRITE(6,830)
      IF (MYWORD(ALLKEY,'STO3G') ) WRITE(6,840)
      IF (MYWORD(ALLKEY,'IUPD')) THEN
         II=NINT(READA(KEYWRD,INDEX(KEYWRD,'IUPD=')))
         IF (II.EQ.0) WRITE(6,100)
         IF (II.EQ.1) WRITE(6,110)
         IF (II.EQ.2) WRITE(6,120)
      ENDIF
      IF (MYWORD(ALLKEY,'HESS')) THEN
         II=NINT(READA(KEYWRD,INDEX(KEYWRD,'HESS=')))
         IF (II.EQ.0) WRITE(6,130)
         IF (II.EQ.1) WRITE(6,140)
         IF (II.EQ.2) WRITE(6,150)
         IF (II.EQ.3) WRITE(6,160)
      ENDIF
      IF (MYWORD(ALLKEY,' MODE')) WRITE(6,170)
     1 NINT(READA(KEYWRD,INDEX(KEYWRD,'MODE=')))
      IF (MYWORD(ALLKEY,' RECALC')) WRITE(6,180)
     1 NINT(READA(KEYWRD,INDEX(KEYWRD,'RECALC')))
      IF (MYWORD(ALLKEY,' DMAX')) WRITE(6,190)
     1 READA(KEYWRD,INDEX(KEYWRD,'DMAX='))
      IF (MYWORD(ALLKEY,' MS=')) WRITE(6,200)
     1 NINT(READA(KEYWRD,INDEX(KEYWRD,' MS=')))
      IF (MYWORD(ALLKEY,' PRNT')) WRITE(6,210)
      IF (MYWORD(ALLKEY,'IRC=') ) THEN
         MAXGEO=1
         WRITE(6,850)NINT(READA(KEYWRD,INDEX(KEYWRD,'IRC=')))
      ELSEIF (MYWORD(ALLKEY,'IRC') ) THEN
         MAXGEO=1
         WRITE(6,860)
      ENDIF
      IF (MYWORD(ALLKEY,'CHARGE') )
     1 WRITE(6,870)NINT(READA(KEYWRD,INDEX(KEYWRD,'CHARGE')))
      IF (MYWORD(ALLKEY,'GRAD') ) WRITE(6,880)
      UHF=(MYWORD(ALLKEY,'UHF') )
      IF(UHF)WRITE(6,890)
      BIRAD=(MYWORD(ALLKEY,'BIRAD') )
      IF(BIRAD)WRITE(6,910)
      EXCI=(MYWORD(ALLKEY,'EXCITED') )
      IF(EXCI) WRITE(6,920)
      TRIP=(MYWORD(ALLKEY,'TRIP') )
      IF(TRIP)WRITE(6,950)
      IF (MYWORD(ALLKEY,'SYM') ) WRITE(6,990)
      IF (MYWORD(ALLKEY,' GROUP') ) THEN
         WRITE(6,1000)
         IF (MYWORD(ALLKEY,' RMAT') )    WRITE(6,1010)
         IF (MYWORD(ALLKEY,' IPO') )     WRITE(6,1020)
         IF (MYWORD(ALLKEY,' NODEGEN') ) WRITE(6,1030)
      ENDIF
      IF (MYWORD(ALLKEY,' RMAT') ) THEN
         WRITE(6,'(//,10X,''RMAT MUST BE SPECIFIED WITH '',
     1   ''GROUP'')')
         STOP
      ENDIF
      IF (MYWORD(ALLKEY,' IPO') ) THEN
         WRITE(6,'(//,10X,''IPO MUST BE SPECIFIED WITH '',
     1   ''GROUP'')')
         STOP
      ENDIF
      IF (MYWORD(ALLKEY,' NODEGEN') ) THEN
         WRITE(6,'(//,10X,''NODEGEN MUST BE SPECIFIED WITH '',
     1   ''GROUP'')')
         STOP
      ENDIF
      IF(MYWORD(ALLKEY,'OPEN('))THEN
         I=INDEX(KEYWRD,'OPEN(')
         IELEC=READA(KEYWRD,I)
         ILEVEL=READA(KEYWRD,I+7)
         WRITE(6,1050)IELEC,ILEVEL
      ENDIF
      IF(MYWORD(ALLKEY,'MICROS'))
     1WRITE(6,1040)INT(READA(KEYWRD,INDEX(KEYWRD,'MICROS')))
      IF(MYWORD(ALLKEY,'DRC='))THEN
         MAXGEO=1
         WRITE(6,560)READA(KEYWRD,INDEX(KEYWRD,'DRC='))
      ELSEIF (MYWORD(ALLKEY,' DRC') ) THEN
         MAXGEO=1
         WRITE(6,550)
      ENDIF
      IF(MYWORD(ALLKEY,'KINE'))
     1WRITE(6,570)READA(KEYWRD,INDEX(KEYWRD,'KINE'))
      CHRONO='SECONDS'
      TIME=1
      IF(MYWORD(ALLKEY,' T=')) THEN
         I=INDEX(KEYWRD,' T=')
         TLEFT=READA(KEYWRD,I)
         DO 20 J=I+3,241
            IF( J.EQ.241.OR.KEYWRD(J+1:J+1).EQ.' ') THEN
               CH=KEYWRD(J:J)
               IF( CH .EQ. 'M') CHRONO='MINUTES'
               IF( CH .EQ. 'M') TIME=60
               IF( CH .EQ. 'H') CHRONO='HOURS'
               IF( CH .EQ. 'H') TIME=3600
               IF( CH .EQ. 'D') CHRONO='DAYS'
               IF( CH .EQ. 'D') TIME=86400
               GOTO 30
            ENDIF
   20    CONTINUE
   30    CONTINUE
         IF(TLEFT.LT.99999.9D0)THEN
            WRITE(6,1060)TLEFT,CHRONO
         ELSE
            WRITE(6,1070)TLEFT,CHRONO
         ENDIF
         TLEFT=TLEFT*TIME
      ELSEIF(NUMCAL.EQ.1)THEN
         TLEFT=MAXTIM
         WRITE(6,1060)TLEFT,'SECONDS'
      ELSE
         WRITE(6,1060)TLEFT,'SECONDS'
      ENDIF
      TIME=1
      CHRONO='SECONDS'
      IF(MYWORD(ALLKEY,' DUMP')) THEN
         I=INDEX(KEYWRD,' DUMP')
         TDUMP=READA(KEYWRD,I)
         DO 40 J=I+6,241
            IF( J.EQ.241.OR.KEYWRD(J+1:J+1).EQ.' ') THEN
               CH=KEYWRD(J:J)
               IF( CH .EQ. 'M') CHRONO='MINUTES'
               IF( CH .EQ. 'M') TIME=60.D0
               IF( CH .EQ. 'H') CHRONO='HOURS'
               IF( CH .EQ. 'H') TIME=3600.D0
               IF( CH .EQ. 'D') CHRONO='DAYS'
               IF( CH .EQ. 'D') TIME=86400.D0
               GOTO 50
            ENDIF
   40    CONTINUE
   50    CONTINUE
         IF(TDUMP.LT.99999.9D0)THEN
            WRITE(6,1080)TDUMP,CHRONO
         ELSE
            WRITE(6,1090)TDUMP,CHRONO
         ENDIF
         TDUMP=TDUMP*TIME
      ELSEIF(NUMCAL.EQ.1)THEN
         TDUMP=MAXDMP
         WRITE(6,1080)TDUMP,'SECONDS'
      ELSE
         WRITE(6,1080)TDUMP,'SECONDS'
      ENDIF
      IF (MYWORD(ALLKEY,'1SCF') ) THEN
         WRITE(6,1100)
         IF(INDEX(KEYWRD,'RESTART').EQ.0)MAXGEO=MAXGEO+1
      ENDIF
      CI=MYWORD(ALLKEY,'C.I.')
      IF (CI) THEN
         J=INDEX(KEYWRD,'C.I.=(')
         IF(J.NE.0)THEN
            WRITE(6,1120)INT(READA(KEYWRD,INDEX(KEYWRD,'C.I.=(')+7)),
     1      INT(READA(KEYWRD,INDEX(KEYWRD,'C.I.=(')+5))
         ELSE
            WRITE(6,1110)INT(READA(KEYWRD,INDEX(KEYWRD,'C.I.')+5))
         ENDIF
      ENDIF
      IF (MYWORD(ALLKEY,' FORCE') ) THEN
         WRITE(6,1130)
         MAXGEO=MAXGEO+1
      ENDIF
      IF (MYWORD(ALLKEY,' EF')) THEN
         WRITE(6,80)
         MAXGEO=MAXGEO+1
      ENDIF
      IF (MYWORD(ALLKEY,' TS')) THEN
         WRITE(6,90)
         MAXGEO=MAXGEO+1
      ENDIF
      METHOD=0
      IF (MYWORD(ALLKEY,'MINDO') ) THEN
         WRITE(6,1140)
         MINDO3=.TRUE.
         METHOD=1
      ENDIF
      IF (MYWORD(ALLKEY,'AM1') ) THEN
         WRITE(6,1150)
         AM1=.TRUE.
         METHOD=METHOD+1
      ENDIF
      IF (MYWORD(ALLKEY,'PM3') ) THEN
         WRITE(6,1160)
         PM3=.TRUE.
         METHOD=METHOD+1
      ENDIF
C**********************************************************************
C* SHIHAO'S MODIFICATION START
C* Added:
      IF (MYWORD(ALLKEY,'PDG') ) THEN
         WRITE(6,1165)
         PDG=.TRUE.
         METHOD=METHOD+1
      ENDIF
      IF (MYWORD(ALLKEY,'MDG') ) THEN
         WRITE(6,1166)
         MDG=.TRUE.
         METHOD=METHOD+1
      ENDIF
C* SHIHAO'S MODIFICATION END
C**********************************************************************
      IF (MYWORD(ALLKEY,'MNDO') ) THEN
         MNDO=.TRUE.
         METHOD=METHOD+1
      ENDIF
      IF (MYWORD(ALLKEY,'OLDGEO') ) WRITE(6,1180)
      IF (MYWORD(ALLKEY,'PREC') ) WRITE(6,1170)
      IF (MYWORD(ALLKEY,'NOINTER') ) WRITE(6,1190)
      IF (MYWORD(ALLKEY,'ISOTOPE') ) WRITE(6,1200)
      IF (MYWORD(ALLKEY,'DENOUT') ) WRITE(6,1210)
      IF (MYWORD(ALLKEY,'SHIFT') ) WRITE(6,1220)
     1 READA(KEYWRD,INDEX(KEYWRD,'SHIFT'))
      IF (MYWORD(ALLKEY,'OLDENS') ) WRITE(6,1230)
      IF (MYWORD(ALLKEY,'SCFCRT') ) WRITE(6,1240)
     1 READA(KEYWRD,INDEX(KEYWRD,'SCFCRT'))
      IF (MYWORD(ALLKEY,'ENPART') ) WRITE(6,1250)
      IF (MYWORD(ALLKEY,'NOXYZ') ) WRITE(6,1260)
      IF (MYWORD(ALLKEY,'SIGMA') ) THEN
         WRITE(6,1270)
         MAXGEO=MAXGEO+1
      ENDIF
      IF (MYWORD(ALLKEY,'NLLSQ') ) THEN
         WRITE(6,1280)
         MAXGEO=MAXGEO+1
      ENDIF
      IF (MYWORD(ALLKEY,'ROOT') ) WRITE(6,1290)
     1 NINT(READA(KEYWRD,INDEX(KEYWRD,'ROOT')))
      IF (MYWORD(ALLKEY,'TRANS=') ) THEN
         WRITE(6,1310)NINT(READA(KEYWRD,INDEX(KEYWRD,'TRANS=')))
      ELSEIF (MYWORD(ALLKEY,'TRANS') ) THEN
         WRITE(6,1300)
      ENDIF
      IF (MYWORD(ALLKEY,'SADDLE') ) THEN
         WRITE(6,1320)
         MAXGEO=MAXGEO+1
      ENDIF
      IF (MYWORD(ALLKEY,' LET') ) WRITE(6,1330)
      IF (MYWORD(ALLKEY,'COMPFG') ) WRITE(6,1340)
      IF (MYWORD(ALLKEY,'GNORM') ) WRITE(6,1350)
     1 READA(KEYWRD,INDEX(KEYWRD,'GNORM'))
      IF (MYWORD(ALLKEY,'PULAY') ) WRITE(6,1360)
      IF (MYWORD(ALLKEY,' STEP1')  )WRITE(6,1370)
     1 READA(KEYWRD,INDEX(KEYWRD,'STEP1')+6)
      IF (MYWORD(ALLKEY,' STEP2')  )WRITE(6,1380)
     1 READA(KEYWRD,INDEX(KEYWRD,'STEP2')+6)
      IF (MYWORD(ALLKEY,' STEP')  )WRITE(6,1570)
     1 READA(KEYWRD,INDEX(KEYWRD,'STEP')+5)
      IF (MYWORD(ALLKEY,' POINT1')  )THEN
         IP1=READA(KEYWRD,INDEX(KEYWRD,'POINT1')+7)
         WRITE(6,1390) IP1
      ENDIF
      IF (MYWORD(ALLKEY,' POINT2')  )THEN
         IP2=READA(KEYWRD,INDEX(KEYWRD,'POINT2')+7)
         WRITE(6,1400) IP2
      ENDIF
      IF (MYWORD(ALLKEY,' MAX') ) WRITE(6,1410)
      IF (MYWORD(ALLKEY,' POINT')  )THEN
         IP=READA(KEYWRD,INDEX(KEYWRD,'POINT')+6)
         WRITE(6,1580) IP
      ENDIF
      IF (MYWORD(ALLKEY,'BAR') ) WRITE(6,1420)
     1 READA(KEYWRD,INDEX(KEYWRD,'BAR'))
      IF (MYWORD(ALLKEY,'CAMP') ) WRITE(6,1430)
      IF (MYWORD(ALLKEY,'KING') ) WRITE(6,1430)
      IF (MYWORD(ALLKEY,'EIGS') ) WRITE(6,1440)
      IF (MYWORD(ALLKEY,'EIGINV') ) WRITE(6,1450)
      IF (MYWORD(ALLKEY,'NONR') ) WRITE(6,1460)
      IF (MYWORD(ALLALLKEYKEY,'ORIDE') ) WRITE(6,1470)
      IF (MYWORD(ALLKEY,'HYPERF') ) WRITE(6,1480)
      IF (MYWORD(ALLKEY,' PL') ) WRITE(6,1490)
      IF (MYWORD(ALLKEY,'FILL') ) WRITE(6,1500)
     1 NINT(READA(KEYWRD,INDEX(KEYWRD,'FILL')))
      IF (MYWORD(ALLKEY,'ITRY') ) WRITE(6,1540)
     1 NINT(READA(KEYWRD,INDEX(KEYWRD,'ITRY')))
      IF (MYWORD(ALLKEY,'0SCF') ) WRITE(6,1560)
      IF(UHF)THEN
         IF(BIRAD.OR.EXCI.OR.CI)THEN
            WRITE(6,'(//10X,
     1'' UHF USED WITH EITHER BIRAD, EXCITED OR C.I. '')')
            WRITE(6,1550)
            GOTO 70
         ENDIF
      ELSE
         IF(EXCI.AND. TRIP) THEN
            WRITE(6,'(//10X,'' EXCITED USED WITH TRIPLET'')')
            WRITE(6,1550)
            GOTO 70
         ENDIF
      ENDIF
      IF (INDEX(KEYWRD,'T-PRIO').NE.0.AND.
     1INDEX(KEYWRD,'DRC').EQ.0) THEN
         WRITE (6,'(//10X,''T-PRIO AND NO DRC'')')
         WRITE (6,1550)
         GOTO 70
      ENDIF
      IF ( METHOD .GT. 1) THEN
         WRITE(6,'(//10X,
     1'' ONLY ONE OF MINDO, MNDO, AM1 AND PM3 ALLOWED'')')
         WRITE (6,1550)
         GOTO 70
      ENDIF
C     PATAS
      IF (MYWORD(ALLKEY,'MEP=')) THEN
         I=NINT(READA(KEYWRD,INDEX(KEYWRD,'MEP=')))
         IF (I.EQ.1) THEN
            WRITE(6,1590)
         ELSE
            WRITE(6,1600)
         ENDIF
      ENDIF
      IF (MYWORD(ALLKEY,'ORT')) WRITE(6,1610)
      IF (MYWORD(ALLKEY,'TOM')) WRITE(6,1620)
      IF (MYWORD(ALLKEY,'JIALI')) WRITE(6,1630)
C     PATAS
      IF (MYWORD(ALLKEY,' FIELD') )THEN
         WRITE(6,1510)
      ENDIF
      IF (MYWORD(ALLKEY,'THERMO') )THEN
         WRITE(6,1520)
         IF(MYWORD(ALLKEY,' ROT')) THEN
            WRITE(6,1530)NINT(READA(KEYWRD,INDEX(KEYWRD,' ROT')))
         ELSE
            WRITE(6,'
     1    (//10X,'' YOU MUST SUPPLY THE SYMMETRY NUMBER "ROT"'')')
            STOP
         ENDIF
      ENDIF
      IF(MAXGEO.GT.1)THEN
         WRITE(6,'(//10X,''MORE THAN ONE GEOMETRY OPTION HAS BEEN '',
     1''SPECIFIED'',/10X,
     2''CONFLICT MUST BE RESOLVED BEFORE JOB WILL RUN'')')
         STOP
      ENDIF
      IF(INDEX(KEYWRD,'MULLIK').NE.0.AND.UHF)THEN
         WRITE(6,'(A)')' MULLIKEN POPULATION NOT AVAILABLE WITH UHF'
         STOP
      ENDIF
      IF(ALLKEY.NE.' ')THEN
         J=0
         DO 60 I=1,240
            IF(ALLKEY(I:I).NE.' '.OR.ALLKEY(I:I+1).NE.'  ')THEN
               J=J+1
               CH=ALLKEY(I:I)
               ALLKEY(J:J)=CH
            ENDIF
   60    CONTINUE
         IF(ALLKEY(241:241).NE.' ')THEN
            J=J+1
            CH=ALLKEY(241:241)
            ALLKEY(J:J)=CH
         ENDIF
         J=MAX(1,J)
         L=INDEX(KEYWRD,'DEBUG')
         IF(L.NE.0)THEN
            WRITE(6,'('' *  DEBUG KEYWORDS USED:  '',A)')ALLKEY(:J)
         ELSE
            WRITE(6,'(///10X,''UNRECOGNIZED KEY-WORDS: ('',A,'')'')')
     1ALLKEY(:J)
            WRITE(6,'(///10X,''CALCULATION STOPPED TO AVOID WASTING TIME
     1.'')')
            WRITE(6,'(///10X,''IF THESE ARE DEBUG KEYWORDS, ADD THE KEYW
     1ORD "DEBUG"'')')
            STOP
         ENDIF
      ENDIF
      RETURN
   70 WRITE(6,'(//10X,'' CALCULATION ABANDONED, SORRY!'')')
      STOP
C ***********************************************************
C ***********************************************************
   80 FORMAT(' *  EF       - USE EF ROUTINE FOR MINIMUM SEARCH')
   90 FORMAT(' *  TS       - USE EF ROUTINE FOR TS SEARCH')
  100 FORMAT(' *  IUPD=    - HESSIAN WILL NOT BE UPDATED')
  110 FORMAT(' *  IUPD=    - HESSIAN WILL BE UPDATED USING POWELL')
  120 FORMAT(' *  IUPD=    - HESSIAN WILL BE UPDATED USING BFGS')
  130 FORMAT(' *  HESS=    - DIAGONAL HESSIAN USED AS INITIAL GUESS')
  140 FORMAT(' *  HESS=    - INITIAL HESSIAN WILL BE CALCULATED')
  150 FORMAT(' *  HESS=    - INITIAL HESSIAN READ FROM DISK')
  160 FORMAT(' *  HESS=    - INITIAL HESSIAN READ FROM INPUT')
  170 FORMAT(' *  MODE=    - FOLLOW HESSIAN MODE',I3,' TOWARD TS')
  180 FORMAT(' *  RECALC=  - DO',I4,' CYCLES BETWEEN HESSIAN RECALC')
  190 FORMAT(' *  DMAX=    - TAKE MAXIMUM STEPSIZE OF',F5.3,' ANG/RAD')
  200 FORMAT(' *  MS=      - IN MECI, MAGNETIC COMPONENT OF SPIN =',I3)
  210 FORMAT(' *  PRNT     - EXTRA PRINTING IN EF ROUTINE')
C ***********************************************************
  220 FORMAT(' *  VECTORS  - FINAL EIGENVECTORS TO BE PRINTED')
  230 FORMAT(' *  EXTERNAL - USE ATOMIC PARAMETERS FROM THE FOLLOWING '
     1,'FILE',/15X,A)
  240 FORMAT(' *  DENSITY  - FINAL DENSITY MATRIX TO BE PRINTED')
  250 FORMAT(' *  SPIN     - FINAL UHF SPIN MATRIX TO BE PRINTED')
  260 FORMAT(' *  DEPVAR=N - SPECIFIED DISTANCE IS',F7.4,
     1' TIMES BOND LENGTH')
  270 FORMAT(' *  DEP      - OUTPUT FORTRAN CODE FOR BLOCK-DATA')
  280 FORMAT(' *  VELOCITY - INPUT STARTING VELOCITIES FOR DRC')
  290 FORMAT(' *  TIMES    - TIMES OF VARIOUS STAGES TO BE PRINTED')
  300 FORMAT(' *  PARASOK  - USE SOME MNDO PARAMETERS IN AN AM1 CALCULA'
     1,'TION')
  310 FORMAT(' *  NODIIS   - DO NOT USE GDIIS GEOMETRY OPTIMIZER')
  320 FORMAT(' *  BONDS    - FINAL BOND-ORDER MATRIX TO BE PRINTED')
  330 FORMAT(' *  GEO-OK   - OVERRIDE INTERATOMIC DISTANCE CHECK')
  340 FORMAT(' *  FOCK     - LAST FOCK MATRIX TO BE PRINTED')
  350 FORMAT(' *  LARGE    - EXPANDED OUTPUT TO BE PRINTED')
  360 FORMAT(' *   K=      - BRILLOUIN ZONE STRUCTURE TO BE CALCULATED')
  370 FORMAT(' *  NOLOG    - SUPPRESS LOG FILE TRAIL, WHERE POSSIBLE')
  380 FORMAT(' *  AIGIN    - GEOMETRY MUST BE IN GAUSSIAN FORMAT')
  390 FORMAT(' *  AIGOUT   - IN ARC FILE, INCLUDE AB-INITIO GEOMETRY')
  400 FORMAT(' *  AIDER    - READ IN AB INITIO DERIVATIVES')
  410 FORMAT(' *  S1978    - 1978 SULFUR PARAMETERS TO BE USED')
  420 FORMAT(' *  SI1978   - 1978 SILICON PARAMETERS TO BE USED')
  430 FORMAT(' *  P1994    - THE ALTERNATE SET OF AM1 PHOSPHORUS ',
     1'PARAMETERS TO BE USED')
  440 FORMAT(' *  GRAPH    - GENERATE FILE FOR GRAPHICS')
  450 FORMAT(' *  1ELECTRON- FINAL ONE-ELECTRON MATRIX TO BE PRINTED')
  460 FORMAT(' *  NOANCI   - DO NOT USE ANALYTICAL C.I. DERIVATIVES')
  470 FORMAT(' *  ESR      - RHF SPIN DENSITY CALCULATION REQUESTED')
  480 FORMAT(' *  NOMM     - DO NOT MAKE MM CORRECTION TO CONH BARRIER')
  490 FORMAT(' *  SETUP    - EXTRA KEYWORDS TO BE READ FROM FILE SETUP')
  500 FORMAT(' *  MMOK     - APPLY MM CORRECTION TO CONH BARRIER')
  510 FORMAT(' *  INTERP   - PRINT DETAILS OF CAMP-KING CONVERGER')
  520 FORMAT(' *  DFP      - USE DAVIDON FLETCHER POWELL OPTIMIZER')
  530 FORMAT(' *  ANALYT   - USE ANALYTIC DERIVATIVES ')
  540 FORMAT(' *  MECI     - M.E.C.I. WORKING TO BE PRINTED')
  550 FORMAT(' *  DRC      - DYNAMIC REACTION COORDINATE CALCULATION')
  560 FORMAT(' *  DRC=     - HALF-LIFE FOR KINETIC ENERGY LOSS =',F9.2,
     1' * 10**(-15) SECONDS')
  570 FORMAT(' *  KINETIC= - ',F9.3,' KCAL KINETIC ENERGY ADDED TO DRC')
  580 FORMAT(' *  LOCALIZE - LOCALIZED ORBITALS TO BE PRINTED')
  590 FORMAT(' *  MULLIK   - THE MULLIKEN ANALYSIS TO BE PERFORMED')
  600 FORMAT(' *   XYZ     - CARTESIAN COORDINATE SYSTEM TO BE USED')
  610 FORMAT(' *   PI      - BONDS MATRIX, SPLIT INTO SIGMA-PI-DELL',
     1' COMPONENTS, TO BE PRINTED')
  620 FORMAT(' *  ECHO     - ALL INPUT DATA TO BE ECHOED BEFORE RUN')
  630 FORMAT(' *  H-PRIOR  - HEAT OF FORMATION TAKES PRIORITY IN DRC')
  640 FORMAT(' *  X-PRIOR  - GEOMETRY CHANGES TAKE PRIORITY IN DRC')
  650 FORMAT(' *  T-PRIOR  - TIME TAKES PRIORITY IN DRC')
  660 FORMAT(' *  POLAR    - CALCULATE FIRST, SECOND AND THIRD-ORDER'
     1,' POLARIZABILITIES')
  670 FORMAT(' *  COMPFG   - PRINT HEAT OF FORMATION CALC''D IN COMPFG')
  680 FORMAT(' *  DEBUG    - DEBUG OPTION TURNED ON')
  690 FORMAT(' *  RESTART  - CALCULATION RESTARTED')
C
C     KEYWORDS ADDED FOR ESP MOPAC
C
  700 FORMAT(' *  ESP      - ELECTROSTATIC POTENTIAL CALCULATION')
  710 FORMAT(' *  NSURF    - NUMBER OF LAYERS')
  720 FORMAT(' *  SCALE    - SCALING FACTOR FOR VAN DER WAALS DISTANCE')
  730 FORMAT(' *  SCINCR   - INCREMENT BETWEEN LAYERS')
  740 FORMAT(' *  SLOPE    - SLOPE - USED TO SCALE MNDO ESP CHARGES')
  750 FORMAT(' *  DIPOLE   - FIT THE ESP TO THE CALCULATED DIPOLE')
  760 FORMAT(' *  DIPX     - X COMPONENT OF DIPOLE TO BE FIT')
  770 FORMAT(' *  DIPY     - Y COMPONENT OF DIPOLE TO BE FIT')
  780 FORMAT(' *  DIPZ     - Z COMPONENT OF DIPOLE TO BE FIT')
  790 FORMAT(' *  CONNOLLY - USE CONNOLLY SURFACE')
  800 FORMAT(' *  ESPRST   - RESTART OF ELECTRIC POTENTIAL CALCULATION')
  810 FORMAT(' *  POTWRT   - WRITE OUT ELECTRIC POT. DATA TO FILE 21')
  820 FORMAT(' *  WILLIAMS - USE WILLIAMS SURFACE')
  830 FORMAT(' *  SYMAVG   - AVERAGE SYMMETRY EQUIVALENT ESP CHARGES')
  840 FORMAT(' *  STO3G    - DEORTHOGONALIZE ORBITALS IN STO-3G BASIS')
  850 FORMAT(' *  IRC=N    - INTRINSIC REACTION COORDINATE',I3,
     1' DEFINED')
  860 FORMAT(' *  IRC      - INTRINSIC REACTION COORDINATE CALCULATION')
  870 FORMAT(3(' *',/),' *',15X,'  CHARGE ON SYSTEM =',I3,3(/,' *'))
  880 FORMAT(' *  GRADIENTS- ALL GRADIENTS TO BE PRINTED')
  890 FORMAT(' *  UHF      - UNRESTRICTED HARTREE-FOCK CALCULATION')
  881 FORMAT(' *  PMEP     - COMPLETE SEMIEMPIRICAL MEP CALCULATION')
  891 FORMAT(' *  PMEPR    - COMPLETE SEMIEMPIRICAL MEP IN A PLANE TO',
     1                       ' BE DEFINED')
  901 FORMAT(' *  QPMEP    - CHARGES DERIVED FROM WANG-FORD TYPE AM1',
     1                       ' MEP')
  911 FORMAT(' *  PRTMEP   - MEP CONTOUR DATA OUTPUT TO <FILENAME>.mep')
  921 FORMAT(' *  MINMEP   - MINIMIZE MEP MINIMA IN THE PLANE DEFINED')
  931 FORMAT(' *  WILLIAMS - USE WILLIAMS SURFACE')
  900 FORMAT(' *  SINGLET  - STATE REQUIRED MUST BE A SINGLET')
  910 FORMAT(' *  BIRADICAL- SYSTEM HAS TWO UNPAIRED ELECTRONS')
  920 FORMAT(' *  EXCITED  - FIRST EXCITED STATE IS TO BE OPTIMIZED')
  930 FORMAT(' *  SINGLET  - SPIN STATE DEFINED AS A SINGLET')
  940 FORMAT(' *  DOUBLET  - SPIN STATE DEFINED AS A DOUBLET')
  950 FORMAT(' *  TRIPLET  - SPIN STATE DEFINED AS A TRIPLET')
  960 FORMAT(' *  QUARTET  - SPIN STATE DEFINED AS A QUARTET')
  970 FORMAT(' *  QUINTET  - SPIN STATE DEFINED AS A QUINTET')
  980 FORMAT(' *  SEXTET   - SPIN STATE DEFINED AS A SEXTET')
  990 FORMAT(' *  SYMMETRY - SYMMETRY CONDITIONS TO BE IMPOSED')
 1000 FORMAT(' *  GROUP    - FREQUENCIES TO BE SYMMETRIZED')
 1010 FORMAT(' *  RMAT     - PRINT R MATRICES')
 1020 FORMAT(' *  IPO      - PRINT PERMUTATION OPERATOR')
 1030 FORMAT(' *  NODEGEN  - DO NOT COLLAPSE DEGENERATE FREQUENCIES')
 1040 FORMAT(' *  MICROS=N -',I4,' MICROSTATES TO BE SUPPLIED FOR C.I.')
 1050 FORMAT(' *  OPEN(N,N)- THERE ARE',I2,' ELECTRONS IN',I2,' LEVELS')
 1060 FORMAT(' *   T=      - A TIME OF',F8.1,' ',A7,' REQUESTED')
 1070 FORMAT(' *   T=      - A TIME OF',G11.3,' ',A7,' REQUESTED')
 1080 FORMAT(' *  DUMP=N   - RESTART FILE WRITTEN EVERY',F8.1,
     1' ',A7)
 1090 FORMAT(' *  DUMP=N   - RESTART FILE WRITTEN EVERY',G11.3,
     1' ',A7)
 1100 FORMAT(' *  1SCF     - DO 1 SCF AND THEN STOP ')
 1110 FORMAT(' *  C.I.=N   -',I2,' M.O.S TO BE USED IN C.I.')
 1120 FORMAT(' * C.I.=(N,M)-',I2,' DOUBLY FILLED LEVELS USED IN A ',/
     1,      ' *             C.I. INVOLVING ',I2,' M.O.''S')
 1130 FORMAT(' *  FORCE    - FORCE CALCULATION SPECIFIED')
 1140 FORMAT(' *  MINDO/3  - THE MINDO/3 HAMILTONIAN TO BE USED')
 1150 FORMAT(' *  AM1      - THE AM1 HAMILTONIAN TO BE USED')
 1160 FORMAT(' *  PM3      - THE PM3 HAMILTONIAN TO BE USED')
 1165 FORMAT(' *  PDG      - THE PDDG/PM3 HAMILTONIAN TO BE USED')
 1166 FORMAT(' *  MDG      - THE PDDG/MNDO HAMILTONIAN TO BE USED')
 1170 FORMAT(' *  PRECISE  - CRITERIA TO BE INCREASED BY 100 TIMES')
 1180 FORMAT(' *  OLDGEO   - PREVIOUS GEOMETRY TO BE USED')
 1190 FORMAT(' *  NOINTER  - INTERATOMIC DISTANCES NOT TO BE PRINTED')
 1200 FORMAT(' *  ISOTOPE  - FORCE MATRIX WRITTEN TO DISK (CHAN. 9 )')
 1210 FORMAT(' *  DENOUT   - DENSITY MATRIX OUTPUT ON CHANNEL 10')
 1220 FORMAT(' *  SHIFT    - A DAMPING FACTOR OF',F8.2,' DEFINED')
 1230 FORMAT(' *  OLDENS   - INITIAL DENSITY MATRIX READ OF DISK')
 1240 FORMAT(' *  SCFCRT   - DEFAULT SCF CRITERION REPLACED BY',G12.3)
 1250 FORMAT(' *  ENPART   - ENERGY TO BE PARTITIONED INTO COMPONENTS')
 1260 FORMAT(' *  NOXYZ    - CARTESIAN COORDINATES NOT TO BE PRINTED')
 1270 FORMAT(' *  SIGMA    - GEOMETRY TO BE OPTIMIZED USING SIGMA.')
 1280 FORMAT(' *  NLLSQ    - GRADIENTS TO BE MINIMIZED USING NLLSQ.')
 1290 FORMAT(' *  ROOT     - IN A C.I. CALCULATION, ROOT',I2,
     1                       ' TO BE OPTIMIZED.')
 1300 FORMAT(' *  TRANS    - THE REACTION VIBRATION TO BE DELETED FROM',
     1' THE THERMO CALCULATION')
 1310 FORMAT(' *  TRANS=   - ',I4,' VIBRATIONS ARE TO BE DELETED FROM',
     1' THE THERMO CALCULATION')
 1320 FORMAT(' *  SADDLE   - TRANSITION STATE TO BE OPTIMIZED')
 1330 FORMAT(' *   LET     - OVERRIDE SOME SAFETY CHECKS')
 1340 FORMAT(' *  COMPFG   - PRINT HEAT OF FORMATION CALC''D IN COMPFG')
 1350 FORMAT(' *  GNORM=   - EXIT WHEN GRADIENT NORM DROPS BELOW ',G8.3)
 1360 FORMAT(' *  PULAY    - PULAY''S METHOD TO BE USED IN SCF')
 1370 FORMAT(' *  STEP1    - FIRST  STEP-SIZE IN GRID =',F7.2)
 1380 FORMAT(' *  STEP2    - SECOND STEP-SIZE IN GRID =',F7.2)
 1390 FORMAT(' *  POINT1   - NUMBER OF ROWS IN GRID =',I3)
 1400 FORMAT(' *  POINT2   - NUMBER OF COLUMNS IN GRID =',I3)
 1410 FORMAT(' *  MAX      - GRID SIZE 23*23 ')
 1420 FORMAT(' *  BAR=     - REDUCE BAR LENGTH BY A MAX. OF',F7.2)
 1430 FORMAT(' *  CAMP,KING- THE CAMP-KING CONVERGER TO BE USED')
 1440 FORMAT(' *  EIGS     - PRINT ALL EIGENVALUES IN ITER')
 1450 FORMAT(' *  EIGINV   - USE HESSIAN EIGENVALUE REVERSION IN EF')
 1460 FORMAT(' *  NONR     - DO NOT USE NEWTON-RAPHSON STEP IN EF')
 1470 FORMAT(' *  ORIDE    - UNCONDITIONALLY, USE CALCULATED LAMDAS IN'
     1//' EF')
 1480 FORMAT(' *  HYPERFINE- HYPERFINE COUPLING CONSTANTS TO BE'
     1,' PRINTED')
 1490 FORMAT(' *   PL      - MONITOR CONVERGANCE IN DENSITY MATRIX')
 1500 FORMAT(' *  FILL=    - IN RHF CLOSED SHELL, FORCE M.O.',I3,' TO BE
     1 FILLED')
 1510 FORMAT(' *  FIELD    - APPLY A STATIC ELECTRIC FIELD')
 1520 FORMAT(' *  THERMO   - THERMODYNAMIC QUANTITIES TO BE CALCULATED')
 1530 FORMAT(' *  ROT      - SYMMETRY NUMBER OF',I3,' SPECIFIED')
 1540 FORMAT(' *  ITRY=    - DO A MAXIMUM OF',I6,' ITERATIONS FOR SCF')
 1550 FORMAT( //10X,' IMPOSSIBLE OPTION REQUESTED,')
 1560 FORMAT(' *  0SCF     - AFTER READING AND PRINTING DATA, STOP')
 1570 FORMAT(' *  STEP     - STEP-SIZE IN PATH=',F7.3)
 1580 FORMAT(' *  POINT    - NUMBER OF POINTS IN PATH=',I3)
C     PATAS
 1590 FORMAT(' *  MEP=1    - MEP IN A CUBIC GRID')
 1600 FORMAT(' *  MEP=2    - MEP IN CONNOLLY SURFACE')
 1610 FORMAT(' *  ORT      - REYNOLDS-RICHARDS MEP')
C     KEYWORDS FOR MIERTUS-SCROCCO-TOMASI MODEL
 1620 FORMAT(' *  TOM      - MIERTUS-SCROCCO-TOMASI SOLVATION MODEL')
 1630 FORMAT(' *  JIALI    - DETAILS OF MST COMPUTATION')
C     PATAS
C     COSMO
 1640 FORMAT(' *  RSOLV    - EFFECTIVE VAN DER WAALS RADIUS OF SOLVENT')
 1650 FORMAT(' *  EPS      - DIELECTRIC CONSTANT OF SOLVENT')
 1660 FORMAT(' *  DELSC    - EFFECTIVE CHARGE RADIUS OF SOLVENT')
 1670 FORMAT(' *  DISEX    - DISTANCE OF SOLVENT INTERACTION')
 1680 FORMAT(' *  NSPA     - NUMBER OF SEGMENTS PER ATOM')
C**********************************************************************
C* SHIHAO'S MODIFICATION START
C* Added:
 1690 FORMAT(' *  CONST     - WITH CONSTRAINT')
C* SHIHAO'S MODIFICATION END
C**********************************************************************
C     COSMO
C   Laurent Modification
 1700 FORMAT('*  ALTCON    - USING ALTERNATIVE GEOMETRIC CONSTRAINTS')
C   End Laurent
      END
