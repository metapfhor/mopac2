      SUBROUTINE STEPSCAN
      INCLUDE 'SIZES'
      COMMON /SCANR / ISCAN,NSCAN,STEPS,STARTS,LIMS,NDIM,IVALS,REDSCN
      COMMON /GENRAL/ COORD(3,NUMATM), COLD(3,NUMATM*3), GOLD(MAXPAR)
      COMMON /GEOKST/ NATOMS,LABELS(NUMATM),
     1NA(NUMATM),NB(NUMATM),NC(NUMATM)
      INTEGER ISCAN,NSCAN,IVALS(3*NUMATM),NDIM
      DOUBLE PRECISION STEPS(3*NUMATM),STARTS(3*NUMATM),LIMS(3*NUMATM)
     1                  ,COORD,COLD,GOLD
      COMMON /ALTCON / TRANSL, BANGL, DIHDR, ATOMS, ICONXN, APPLIED,
     1                  VALS, NVALS,NTRANS,NANGL,NDIHD,NATOM
      INTEGER TRANSL(5*NUMATM),NTRANS,BANGL(6*NUMATM),NANGL,
     1         DIHDR(7*NUMATM),NDIHD,ATOMS(NUMATM*NUMATM),
     2         NATOM,ICONXN(6,NUMATM),NVALS
      LOGICAL APPLIED
      DOUBLE PRECISION VALS(3*NUMATM)
      COMMON /GEOM  / GEO
      INTEGER MAXLIM
      LOGICAL REDSCN
      DOUBLE PRECISION ATOT(3,3),GEO(3,NUMATM),TMP
      IF(NDIM.GT.0)THEN

      IF(ABS(VALS(IVALS(1))-LIMS(1)).LT.
     1   ABS(STEPS(1)/2.D0))THEN
      DO I=1,NDIM
      IF(ABS(VALS(IVALS(I))-LIMS(I)).LT.
     1   ABS(STEPS(I)/2.D0))THEN
          MAXLIM=I
      ENDIF
      END DO
      DO I=MAXLIM,1,-1
        TMP=STARTS(I)
        STARTS(I)=LIMS(I)
        LIMS(I)=TMP
        STEPS(I)=-STEPS(I)
      END DO
      MAXLIM=MAXLIM+1
      VALS(IVALS(MAXLIM))=VALS(IVALS(MAXLIM))+STEPS(MAXLIM)
      ELSE
      VALS(IVALS(1))=VALS(IVALS(1))+STEPS(1)
      ENDIF
      ENDIF
      CALL QKXYZINT(COORD,NATOMS,NA,NB,NC,GEO,XPARAM)
      ISCAN=ISCAN+1
      RETURN
      END




      SUBROUTINE ADDSCAN(START,STEP,NUM,ATM,COORD)
**************************************************************************
*
*       MUST BE CALLED INSIDE OF ADDTRLB/BANGLE/DIHDR
*
**************************************************************************
      INCLUDE 'SIZES'
      COMMON /SCANR / ISCAN,NSCAN,STEPS,STARTS,LIMS,NDIM,IVALS,REDSCN
      INTEGER ISCAN,NSCAN,IVALS(3*NUMATM),NDIM
      DOUBLE PRECISION STEPS(3*NUMATM),STARTS(3*NUMATM),LIMS(3*NUMATM)
      COMMON /ALTCON / TRANSL, BANGL, DIHDR, ATOMS, ICONXN, APPLIED,
     1                  VALS, NVALS,NTRANS,NANGL,NDIHD,NATOM
      INTEGER TRANSL(5*NUMATM),NTRANS,BANGL(6*NUMATM),NANGL,
     1         DIHDR(7*NUMATM),NDIHD,ATOMS(NUMATM*NUMATM),
     2         NATOM,ICONXN(6,NUMATM),NVALS
      LOGICAL APPLIED
      DOUBLE PRECISION VALS(3*NUMATM)
      INTEGER MAXLIM, ATM,COORD
      LOGICAL REDSCN
      DOUBLE PRECISION ATOT(3,3),START,STEP
      NDIM=NDIM+1
      IVALS(NDIM)=NVALS
      STARTS(NDIM)=START
      LIMS(NDIM)=START+(NUM)*STEP
      STEPS(NDIM)=STEP
      NSCAN=NSCAN*(NUM+1)
      END

      SUBROUTINE READSCANSTATE()
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      INCLUDE 'SIZES'
      COMMON /ATOMTX/ LTXT, TXTATM(NUMATM)
      COMMON /KEYWRD/ KEYWRD
      COMMON /TITLES/ KOMENT,TITLE
      COMMON /GEOKST/ NATOMS,LABELS(NUMATM),
     1NA(NUMATM),NB(NUMATM),NC(NUMATM)
      COMMON /GEOVAR/ NVAR, LOC(2,MAXPAR), IDUMY, XPARAM(MAXPAR)
      COMMON /ALTCON / TRANSL, BANGL, DIHDR, ATOMS, ICONXN, APPLIED,
     1                  VALS, NVALS,NTRANS,NANGL,NDIHD,NATOM
      INTEGER TRANSL(5*NUMATM),NTRANS,BANGL(6*NUMATM),NANGL,
     1         DIHDR(7*NUMATM),NDIHD,ATOMS(NUMATM*NUMATM),
     2         NATOM,ICONXN(6,NUMATM),NVALS
      LOGICAL APPLIED
      DOUBLE PRECISION VALS(3*NUMATM)
      COMMON /PERMUTE /PR,PRT
      COMMON /GENRAL/ COORD(3,NUMATM), COLD(3,NUMATM*3), GOLD(MAXPAR)
      COMMON /GEOM  / GEO(3,NUMATM)
      COMMON /AXES / XHAT(3),YHAT(3),ZHAT(3),OFF(3),ATOT
      COMMON /SCANR / ISCAN,NSCAN,STEPS,STARTS,LIMS,NDIM,IVALS,REDSCN
      INTEGER ISCAN,NSCAN,IVALS(3*NUMATM),NDIM
      DOUBLE PRECISION STEPS(3*NUMATM),STARTS(3*NUMATM),LIMS(3*NUMATM)
      INTEGER PR(NUMATM),PRT(NUMATM),GETSIZE
      INTEGER FILEI,FILEN
      LOGICAL PRMTD,REDSCN
      DOUBLE PRECISION ATOT(3,3)
      CHARACTER KEYWRD*241, KOMENT*81, TITLE*81,GETNAM*80,TXTATM*8,
     1           LTXT*1
      REDSCN=.TRUE.
      OPEN(UNIT=26,FILE=GETNAM('FOR005'),STATUS='OLD')
      READ(26,'(2I16)')ISCAN,NSCAN
      IF(ISCAN.GE.NSCAN)STOP
      READ(26,'(I6)')NATOMS
      READ(26,'(A)')KEYWRD(:),KOMENT(:),TITLE(:)
      READ(26,'(I3)')(LABELS(I),I=1,NATOMS)
      READ(26,'(3I3)')(NA(I),NB(I),NC(I),I=1,NATOMS)
      READ(26,'(3ES20.12)')((GEO(J,I),J=1,3),I=1,NATOMS)
      READ(26,'(3ES20.12)')((COORD(J,I),J=1,3),I=1,NATOMS)
      READ(26,'(I6)')NVAR
      READ(26,'(2I3)')(LOC(1,I),LOC(2,I),I=1,NVAR)
      READ(26,'(ES20.12)')(XPARAM(I),I=1,NVAR)
C       PERMUTE
      READ(26,'(I3)')(PR(I),I=1,NATOMS)
      READ(26,'(I3)')(PRT(I),I=1,NATOMS)
C       ALTCON
      READ(26,'(I3)')NTRANS
      IF(NTRANS.NE.0)
     1READ(26,'(5I3)')(TRANSL(I),I=1,NTRANS)
      READ(26,'(I3)')NANGL
      IF(NANGL.NE.0)
     1 READ(26,'(6I3)')(BANGL(I),I=1,NANGL)
      READ(26,'(I3)')NDIHD
      IF(NDIHD.NE.0)
     1 READ(26,'(7I3)')(DIHDR(I),I=1,NDIHD)
      READ(26,'(I3)')NATOM
      IF(NATOM.NE.0)
     1 READ(26,'(I3)')(ATOMS(I),I=1,NATOM)
      READ(26,'(6I3)')((ICONXN(I,J),I=1,6),J=1,NATOMS)
      READ(26,'(I3)')NVALS
      READ(26,'(ES20.12)')(VALS(I),I=1,NVALS)
C       SCANR
      READ(26,'(I3)')NDIM
      READ(26,'(3ES20.12,I3)')
     1 (STARTS(I),STEPS(I),LIMS(I),IVALS(I),I=1,NDIM)
C       AXES
      READ(26,'(3ES20.12)')(XHAT(I),I=1,3)
      READ(26,'(3ES20.12)')(YHAT(I),I=1,3)
      READ(26,'(3ES20.12)')(ZHAT(I),I=1,3)
      READ(26,'(3ES20.12)')(OFF(I),I=1,3)
      READ(26,'(3ES20.12)')((ATOT(I,J),J=1,3),I=1,3)
      CLOSE(26)
  403 CONTINUE
      DO I=1,NUMATM
      TXTATM(I)=""
      END DO
      END


      SUBROUTINE WRITESCANSTATE(XYZ)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      INCLUDE 'SIZES'

      COMMON /KEYWRD/ KEYWRD
      COMMON /TITLES/ KOMENT,TITLE
      COMMON /GEOKST/ NATOMS,LABELS(NUMATM),
     1NA(NUMATM),NB(NUMATM),NC(NUMATM)
      COMMON /GEOVAR/ NVAR, LOC(2,MAXPAR), IDUMY, XPARAM(MAXPAR)
      COMMON /ALTCON / TRANSL, BANGL, DIHDR, ATOMS, ICONXN, APPLIED,
     1                  VALS, NVALS,NTRANS,NANGL,NDIHD,NATOM
      INTEGER TRANSL(5*NUMATM),NTRANS,BANGL(6*NUMATM),NANGL,
     1         DIHDR(7*NUMATM),NDIHD,ATOMS(NUMATM*NUMATM),
     2         NATOM,ICONXN(6,NUMATM),NVALS
      LOGICAL APPLIED
      DOUBLE PRECISION VALS(3*NUMATM)
      COMMON /PERMUTE /PR,PRT
      COMMON /GENRAL/ COORD(3,NUMATM), COLD(3,NUMATM*3), GOLD(MAXPAR)
      COMMON /GEOM  / GEO(3,NUMATM)
      COMMON /AXES / XHAT(3),YHAT(3),ZHAT(3),OFF(3),ATOT
      COMMON /SCANR / ISCAN,NSCAN,STEPS,STARTS,LIMS,NDIM,IVALS,REDSCN
      INTEGER ISCAN,NSCAN,IVALS(3*NUMATM),NDIM
      DOUBLE PRECISION STEPS(3*NUMATM),STARTS(3*NUMATM),LIMS(3*NUMATM)
      INTEGER PR(NUMATM),PRT(NUMATM),GETLENGTH
      INTEGER FILEI,FILEN
      LOGICAL PRMTD,REDSCN
      DOUBLE PRECISION ATOT(3,3),XYZ(3,NUMATM)
      CHARACTER KEYWRD*241, KOMENT*81, TITLE*81,GETNAM*80

      IF(REDSCN)THEN
      OPEN(UNIT=26,FILE=GETNAM('FOR005'),STATUS='REPLACE')
      ELSE
      OPEN(UNIT=26,FILE=GETNAM('FOR026'),STATUS='REPLACE')
      ENDIF
      WRITE(26,'(2I16)')ISCAN,NSCAN
      WRITE(26,'(I6)')NATOMS
      WRITE(26,'(A)')KEYWRD(:),KOMENT(:),TITLE(:)
      WRITE(26,'(I3)')(LABELS(I),I=1,NATOMS)
      WRITE(26,'(3I3)')(NA(I),NB(I),NC(I),I=1,NATOMS)
      WRITE(26,'(3ES20.12)')((GEO(J,I),J=1,3),I=1,NATOMS)
      WRITE(26,'(3ES20.12)')((XYZ(J,I),J=1,3),I=1,NATOMS)
      WRITE(26,'(I6)')NVAR
      WRITE(26,'(2I3)')(LOC(1,I),LOC(2,I),I=1,NVAR)
      WRITE(26,'(ES20.10)')(XPARAM(I),I=1,NVAR)
C       PERMUTE
      WRITE(26,'(I3)')(PR(I),I=1,NATOMS)
      WRITE(26,'(I3)')(PRT(I),I=1,NATOMS)
C       ALTCON
      WRITE(26,'(I3)')NTRANS
      IF(NTRANS.NE.0)
     1WRITE(26,'(5I3)')(TRANSL(I),I=1,NTRANS)
      WRITE(26,'(I3)')NANGL
      IF(NANGL.NE.0)
     1 WRITE(26,'(6I3)')(BANGL(I),I=1,NANGL)
      WRITE(26,'(I3)')NDIHD
      IF(NDIHD.NE.0)
     1 WRITE(26,'(7I3)')(DIHDR(I),I=1,NDIHD)
      WRITE(26,'(I3)')NATOM
      IF(NATOM.NE.0)
     1 WRITE(26,'(I3)')(ATOMS(I),I=1,NATOM)
      WRITE(26,'(6I3)')((ICONXN(I,J),I=1,6),J=1,NATOMS)
      WRITE(26,'(I3)')NVALS
      WRITE(26,'(ES20.12)')(VALS(I),I=1,NVALS)
C       SCANR
      WRITE(26,'(I3)')NDIM
      WRITE(26,'(3ES20.12,I3)')
     1 (STARTS(I),STEPS(I),LIMS(I),IVALS(I),I=1,NDIM)
C       AXES
      WRITE(26,'(3ES20.12)')(XHAT(I),I=1,3)
      WRITE(26,'(3ES20.12)')(YHAT(I),I=1,3)
      WRITE(26,'(3ES20.12)')(ZHAT(I),I=1,3)
      WRITE(26,'(3ES20.12)')(OFF(I),I=1,3)
      WRITE(26,'(3ES20.12)')((ATOT(I,J),J=1,3),I=1,3)
      CLOSE(26)
      END

      SUBROUTINE QKXYZINT(XYZ,NATOMS,NA,NB,NC,GEO)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INCLUDE 'SIZES'
      DIMENSION XYZ(3,NUMATM), NA(NUMATM), NB(NUMATM), NC(NUMATM),
     1 GEO(3,NUMATM)
***********************************************************************
*
* XYZINT WORKS OUT THE INTERNAL COORDINATES OF A MOLECULE.
*        THE "RULES" FOR THE CONNECTIVITY ARE AS FOLLOWS:
*        ATOM I IS DEFINED AS BEING AT A DISTANCE FROM THE NEAREST
*        ATOM J, ATOM J ALREADY HAVING BEEN DEFINED.
*        ATOM I MAKES AN ANGLE WITH ATOM J AND THE ATOM K, WHICH HAS
*        ALREADY BEEN DEFINED, AND IS THE NEAREST ATOM TO J
*        ATOM I MAKES A DIHEDRAL ANGLE WITH ATOMS J, K, AND L. L HAVING
*        BEEN DEFINED AND IS THE NEAREST ATOM TO K, AND J, K AND L
*        HAVE A CONTAINED ANGLE IN THE RANGE 15 TO 165 DEGREES,
*        IF POSSIBLE.
*
*        IF(NA(2).EQ.-1 OR -2 THEN THE ORIGINAL CONNECTIVITY IS USED.
*
*        NOTE THAT GEO AND XYZ MUST NOT BE THE SAME IN THE CALL.
*
*   ON INPUT XYZ    = CARTESIAN ARRAY OF NUMAT ATOMS
*            DEGREE = 1 IF ANGLES ARE TO BE IN RADIANS
*            DEGREE = 57.29578 IF ANGLES ARE TO BE IN DEGREES
*
***********************************************************************
      COMMON /GEOOK/ IGEOOK
      COMMON /NUMCAL/ NUMCAL
C             Laurent Modification: added
      COMMON /AXES / XHAT(3),YHAT(3),ZHAT(3),OFF(3),ATOT
      COMMON /GEOVAR/ NVAR, LOC(2,MAXPAR), IDUMY, XPARAM(MAXPAR)
      COMMON /ALTCON / TRANSL, BANGL, DIHDR, ATOMS, ICONXN, APPLIED,
     1                  VALS, NVALS,NTRANS,NANGL,NDIHD,NATOM
      INTEGER TRANSL(5*NUMATM),NTRANS,BANGL(6*NUMATM),NANGL,
     1         DIHDR(7*NUMATM),NDIHD,ATOMS(NUMATM*NUMATM),
     2         NATOM,ICONXN(6,NUMATM),NVALS
      LOGICAL APPLIED
      DOUBLE PRECISION VALS(3*NUMATM)
      DOUBLE PRECISION XHP(3),YHP(3),ZHP(3),XHT(3),YHT(3),ZHT(3),LNP
     1 ,ATMP(3,3),XY,XZ,YZ,ZZ
      COMMON /PERMUTE /PR,PRT
      INTEGER PR(NUMATM),PRT(NUMATM)
      LOGICAL PRMTD
      DOUBLE PRECISION ATOT(3,3)
      DOUBlE PRECISION DX, DY, DZ
     1  XYZINIT(3,NUMATM)

      COMMON /KEYWRD/ KEYWRD
      CHARACTER KEYWRD*241
      SAVE PRMTD
      DATA PRMTD /.FALSE./
      DATA ICALCN/0/
      IGEOOK=99



      IF(INDEX(KEYWRD,'ALTCON').NE.0.AND..NOT.APPLIED
     1 .AND.NATOM.NE.0)THEN
        IF(.NOT.PRMTD)THEN
            CALL PERATMS(XYZ)
            PRMTD=.TRUE.
        ENDIF
        CALL AALTCON(XYZ,DEGREE)
        APPLIED=.TRUE.
      ENDIF


      DX=XYZ(1,1)
      DY=XYZ(2,1)
      DZ=XYZ(3,1)
      OFF(1)=OFF(1)+ATOT(1,1)*DX+ATOT(1,2)*DY+ATOT(1,3)*DZ
      OFF(2)=OFF(2)+ATOT(2,1)*DX+ATOT(2,2)*DY+ATOT(2,3)*DZ
      OFF(3)=OFF(3)+ATOT(3,1)*DX+ATOT(3,2)*DY+ATOT(3,3)*DZ




      DO I=1,NUMAT
        XYZ(1,I)=XYZ(1,I)-DX
        XYZ(2,I)=XYZ(2,I)-DY
        XYZ(3,I)=XYZ(3,I)-DZ
      END DO



      DO I=2,NUMAT
      IF(I.LT.3) GOTO 30
          CALL BANGLE(XYZ,I,NA(I),NB(I),GEO(2,I))
      IF(I.LT.4) GOTO 30
         CALL DIHED(XYZ,I,NA(I),NB(I),NC(I),GEO(3,I))
   30 GEO(1,I)= SQRT((XYZ(1,I)-XYZ(1,NA(I)))**2+
     1                   (XYZ(2,I)-XYZ(2,NA(I)))**2+
     2                   (XYZ(3,I)-XYZ(3,NA(I)))**2)
      END DO


      GEO(1,1)=0.D0
      GEO(2,1)=0.D0
      GEO(3,1)=0.D0
      GEO(2,2)=0.D0
      GEO(3,2)=0.D0
      GEO(3,3)=0.D0



      DO I=1,NVAR
        XPARAM(I)=GEO(LOC(2,I),LOC(1,I))
      END DO



C       Geometric Constraints should be imposed here



C       Laurent: calculate the input XYZ components for our basis
C       This may need to be reworked for cases where the first two molecules are colinear
C       Translation (should be done at the end in input coords)



C       New Axes

      XHP=XYZ(:,2)
      LNP = SQRT((XHP(1))**2+(XHP(2))**2+(XHP(3))**2)
      XHP(1)=XHP(1)/LNP
      XHP(2)=XHP(2)/LNP
      XHP(3)=XHP(3)/LNP

C       remove component along the new xhat from the coords of the third to get the second axis
      YHP=XYZ(:,3)
      LNP = dot_product(YHP,XHP)
      YHP(1)=YHP(1)-LNP*XHP(1)
      YHP(2)=YHP(2)-LNP*XHP(2)
      YHP(3)=YHP(3)-LNP*XHP(3)
C       make it unitary
      LNP = SQRT((YHP(1))**2+(YHP(2))**2+(YHP(3))**2)
      YHP(1)=YHP(1)/LNP
      YHP(2)=YHP(2)/LNP
      YHP(3)=YHP(3)/LNP
      XY=dot_product(XHP,YHP)

C       find the third axis from the fact that k=ixj
      ZHP(1)=XHP(2)*YHP(3)-XHP(3)*YHP(2)
      ZHP(2)=XHP(3)*YHP(1)-XHP(1)*YHP(3)
      ZHP(3)=XHP(1)*YHP(2)-XHP(2)*YHP(1)
      XZ=dot_product(XHP,ZHP)
      YZ=dot_product(YHP,ZHP)
      ZZ=dot_product(ZHP,ZHP)
C       Update our axes


      ATMP(:,1)=XHP
      ATMP(:,2)=YHP
      ATMP(:,3)=ZHP

      ATOT = MATMUL(ATMP,ATOT)

C       Laurent End

      RETURN
      END
